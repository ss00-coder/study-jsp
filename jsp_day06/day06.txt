[jsp]

	a.jsp --> b.jsp --> c.jsp

	각 페이지마다 필요 시 자바 코드가 작성되며, DB와 연결하는 코드도 jsp파일 안에서
	모두 작성된다. 분리되어 있지 않기 때문에 규모가 작은 프로젝트에 어울리는 방식이며,
	코드가 확장될 수록 가독성이 떨어지고 분업과 유지보수가 좋지 않다.

▶ MVC

[model1]
	a.jsp --> b.jsp --> c.jsp
		   ↓
		DAO.java

	b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다. 선언은 JAVA 페이지에 구현이 되어 있기 때문에
	jsp 내의 JAVA 코드 양이 줄어들지만 결국 사용은 jsp 페이지에서 하기 때문에
	Controller(DAO 메소드를 사용하고 어디 페이지로 이동할 지)와 View가 섞이게 된다.
	페이지가 확장될 수록 유지보수가 좋지 않다. 하지만 설계는 쉽다.

[model2]
	a.jsp	-->	web.xml	-->	Front-Controller.java	------------>	c.jsp
						↓
					Controller.java
					    ↓
					DAO.java
					 ↓
					DB

	a.jsp에서 다음 페이지를 이동하기 전 필요한 비지니스 로직을 완벽하게 분리하여 관리한다.
	사용자가 정의한 확장자(.me, .bo, ...)를 페이지 이동 주소(URL)에 작성하게 되면
	web.xml에 가서 경로를 찾는다. web.xml에 파일 경로를 하나씩 모두 만들게 되면
	코드가 길어지기 때문에 *.me와 같이 그룹화시킨 확장자로 요청을 하나의 경로로 보내주도록
	설정해 놓는다.
	이 경로를 알맞는 Front-Controller.java 경로로 설정해 놓는다.
	Front-Controller에서는 들어온 요청에서 .me앞의 요청 명으로 어떤 로직을 수행할 지를
	판단하도록 분기처리를 한다.
	비지니스 로직을 Front-Controller에서 작업하게 되면 마찬가지로 코드가 길어지고
	유지보수 및 재사용이 어렵기 때문에 요청별 Controller를 만들어서 req와 resp를 받을
	메소드를 선언하여 구현한다. 따라서 Controller안에 선언된 메소드는 모든 Controller에
	구현해야 하기 때문에 인터페이스를 선언하여 추상메소드 형태로 선언해 놓고
	각 Controller에 지정하여 구현하도록 한다.
	메소드 내부에서의 DB연산 작업들은 모두 DAO로 분리하여 사용한다.
	내부 작업이 모두 완료되면 페이지를 이동할 것인지, 어떤 방식으로 할 것인지, 그리고 어디로
	이동할 것인지를 결정해서 리턴해야 한다. 이에 관련된 필드를 클래스로 만들어 놓은 후
	Controller안에 선언한 메소드의 리턴타입으로 지정하여 Front-Controller에 리턴해준다.
	Front-Controller에서는 해당 Controller 메소드의 리턴 값에 담긴 결과에 맞게 처리한 후
	View로 이동하게 된다.

	- redirect(request객체 초기화)
		request에 아무것도 담지 않았으면 사용
		※ 만약 request에 무언가 담았으나 redirect로 이동하고 싶다면,
		   request에 담지 않고, 쿼리 스트링으로 전달하면 된다.

	- forward(request객체 유지)
		request에 무언가 담았다면 사용


JSP 개발 순서
	Table 만들기 -> VO 객체 만들기 -> Mapper.xml 만들기 -> confing.xml에 등록하기
	-> SQL문 작성하기 -> DAO 선언하기 -> 서비스 관련 메소드 선언하기 -> Controller 만들기
	-> Controller에 Action 인터페이스 지정하기 -> Controller에서 재정의한 execute(req, resp) 구현
	-> Result(path, isRedirect) 타입의 필드를 채워서 리턴하기 
	-> FrontController에서 알맞은 Controller의 execute() 사용 -> Result객체에 담아주기
	-> 분기 코드 하단에 result객체 담긴 path와 isRedirect로 알맞게 응답
======================================================================================================
GET 방식 
	보통 쿼리 문자열(query string)에 포함되어 전송되므로, 길이에 제한이 있으며
	주소에 데이터가 보이므로 보안상 취약점이 존재한다.
	중요한 데이터 혹은 길이가 긴 데이터는 POST 방식을 사용하여 요청하는 것이 좋지만
	GET 방식이 POST 방식보다 상대적으로 빠른 전송방식이다.

POST 방식
	데이터를 별도로 첨부(Header에 첨부)하여 전달하는 방식.
	브라우저 히스토리에도 남지 않고 데이터는 쿼리 문자열과는 별도로 전송된다.
	따라서 데이터의 길이에 제한도 없으며, GET 방식 보다 보안성이 높다.
	하지만 GET 방식 보다 상대적으로 느리다.
=======================================================================================================
EL문과 JSTL: 페이지 가독성 상승
	자바 구문을 라이브러리 형태로 만들어 놓고 필요할 때마다 태그로 꺼내 쓰는 기술이다.
	JSP 페이지 내에서 자바 코드와 HTML 코드가 섞여 있으면 가독성이 떨어지고 복잡해진다.
	EL문과 JSTL문을 사용하면 HTML 태그로만 구성된 일관된 소스코드를 볼 수 있다는 장점이 있다.

 - EL(Expression Language)
	값을 간결하고 간편하게 사용할 수 있는 기술

	자바			EL
	<%=name%>		${name}
	<%=member.getName()%>	${member.name}

	값을 찾을 때 작은 Scope에서 큰 Scope로 찾는다.
	page > request > session > application

	${param.name} : 쿼리 스트링의 데이터를 찾는다.
	${requestScope.name} : request객체에서 데이터를 찾는다.
	${sessionScope.name} : session객체에서 데이터를 찾는다.

 - EL 연산자
	%, mod
	&&, and
	||, or
	>, lt
	<, gt
	>=, le
	<=, ge
	==, eq
	!=, ne
	!, not
	empty: 값 비어있으면 true, 아니면 false

 - JSTL(Java Standard Tag Library)
	연산자나 조건문, 반복문 등을 편하게 처리할 수 있으며, JSP 페이지 내에서 자바코드를 사용하지 않고
	로직을 구현할 수 있도록 효율적인 방법을 제공한다.

	자바					JSTL
	<%for(초기식;조건식;증감식;){%><%}%>		<c:forEach var="" begin="" end=""></c:forEach>
	<%for(자료형 변수명: 반복자){%><%}%>		<c:forEach var="" items="${반복자}"></c:forEach>


 - core 태그의 종류
	<c:set>		: 변수 선언
	<c:out>		: 변수 출력(사용)
	<c:if>		: if문
	<c:choose>	: else if문 시작
	<c:when>	: else if문
	<c:otherwise>	: else문
	<c:forEach>	: for문




















